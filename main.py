import logging
from queue import Queue
from flask import Flask, request
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7890639729:AAFSNqu2oayhs8aYh9o9l_T5PjUqLTEl58Q"
ADMIN_ID = 425785910  # –¢–≤–æ–π ID

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
print("üîß Flask —Å—Ç–∞—Ä—Ç—É–µ—Ç...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
app = Flask(__name__)
update_queue = Queue()
dispatcher = Dispatcher(bot, update_queue, workers=0, use_context=True)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–æ–º–ø–∞–Ω–∏–∏
companies = [
    "üè† Clean House Almaty (–æ—Ç 600 —Ç–≥/–º¬≤)",
    "üßΩ UBORKA.KZ (–æ—Ç 700 —Ç–≥/–º¬≤)",
    "üßº CleanExpert (–æ—Ç 800 —Ç–≥/–º¬≤)",
    "‚ú® Crystal Clean (–æ—Ç 700 —Ç–≥/–º¬≤)",
    "üåø Eco Cleaning (–æ—Ç 750 —Ç–≥/–º¬≤)"
]

# –°—Ç–∞—Ä—Ç
def start(update, context):
    user_id = update.message.chat_id
    user_data[user_id] = {"step": "company"}
    buttons = [[KeyboardButton(name)] for name in companies]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context):
    user_id = update.message.chat_id
    text = update.message.text

    if user_id not in user_data:
        user_data[user_id] = {"step": "company"}
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    state = user_data[user_id]

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        step_order = ["company", "type", "datetime", "contact", "area"]
        current_step = state.get("step")
        if current_step in step_order and step_order.index(current_step) > 0:
            prev_step = step_order[step_order.index(current_step) - 1]
            state["step"] = prev_step
            if prev_step == "company":
                buttons = [[KeyboardButton(name)] for name in companies]
                markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=markup)
            elif prev_step == "type":
                update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —É–±–æ—Ä–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=ReplyKeyboardRemove())
            elif prev_step == "datetime":
                update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –∞–¥—Ä–µ—Å:")
            elif prev_step == "contact":
                update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return

    if state["step"] == "company":
        state["company"] = text
        state["step"] = "type"
        update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —É–±–æ—Ä–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è + –º–æ–π–∫–∞ –æ–∫–æ–Ω):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )

    elif state["step"] == "type":
        state["type"] = text
        state["step"] = "datetime"
        update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –∞–¥—Ä–µ—Å (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )

    elif state["step"] == "datetime":
        state["datetime"] = text
        state["step"] = "contact"
        update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )

    elif state["step"] == "contact":
        state["contact"] = text
        state["step"] = "area"
        update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–≤ –º¬≤):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )

    elif state["step"] == "area":
        state["area"] = text
        state["step"] = "done"

        summary = (
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üì¶ –ö–æ–º–ø–∞–Ω–∏—è: {state['company']}\n"
            f"üßπ –¢–∏–ø —É–±–æ—Ä–∫–∏: {state['type']}\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –∞–¥—Ä–µ—Å: {state['datetime']}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {state['contact']}\n"
            f"üìè –ü–ª–æ—â–∞–¥—å: {state['area']} –º¬≤\n\n"
            f"üí¨ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!"
        )

        update.message.reply_text(summary, reply_markup=ReplyKeyboardRemove())
        bot.send_message(chat_id=ADMIN_ID, text=f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n{summary}")
        update.message.reply_text("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ /start.")
        user_data.pop(user_id)

# –ö–æ–º–∞–Ω–¥–∞ /cancel
def cancel(update, context):
    user_id = update.message.chat_id
    if user_id in user_data and user_data[user_id].get("step") == "done":
        user_data.pop(user_id)
        update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        update.message.reply_text("–û—Ç–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–ø–µ.")

# –†–æ—É—Ç—ã –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("cancel", cancel))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "–ë–æ—Ç –Ω–∞ Flask —Ä–∞–±–æ—Ç–∞–µ—Ç"

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
